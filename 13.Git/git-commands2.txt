Git 
====
Git tracks changes in files/codes/scripts 
Git keep the records of old and new using a commitID (command "git show")

Basic Git Commands 
==================
git init = used to initalize empty git repo (directory) in /home/USER/repoName/.git/

git status = used to track file locations

git add = moves files from the working area to the staging area 

git commit - m =  moves files to the local repository from Staging Area (good commit message for tracking changes/author)

git show = prints what changes that happened in a particular commit (any commitID)

git remote -v = lists your aliases 

git push = moves changes in code to Remote-Repo in SCM [GitHub/GitLab, ETC]

git pull = it brings changes in the code to the Working Area 

git log = list all commits 

git show = shows changes that occured in a commit

git branch = a git branch is a line of development 

git merge = allows you to add files to the remoteRepo and checking the differences from running the "git fetch" command 

git fetch = it brings changes in the code to the LocalRepo 

git diff = reviews the difference between what is in the remoteRepo and localRepo Master branch. Allows you to review what files/changes a developer has made 

git clone = it brings the entire code to the Working Area 

git rebase = 

git branch = a git branch is a line of development 
 
 
          Development: writing codes/software (this is how developers commit and change code)
          ===================================================================================
               working-area  -->   staging-area  --> localRepo  -->   remoteRepo [gitHub]
               untracked files     git add           git commit       git push        
               red                 green 
               
               git fetch                             <-----------------------------------   
               git merge 
               git pull  <--------------------------------------------------------------------
                      
                       
                        
        

Prequisite, update author Identity (must be known):
==================================================
git config --global user.email "hr@landmarktech.com"
git config --global user.name "Your Name"
git config --global --list = to confirm the configs have been done 

Commands to commit code versions to SCM in gitHub: 
==================================================
git add .      /  git add *      
git log 
git commit -m "first commit"
git show (to get the commit ID)
git remote -v   
git remote add aliasName repoURL
git push aliasName branchName 
git pull aliasName branchName 
git fetch aliasName branchName 
git diff aliasName/branchName
git merge aliasName/branchName

IDEs - Integrated Development Environments (developers use this to develop code)
================================================================================
Eclipse - open source Java Based IDE 
MyEclipse - not 
NetBeans OS Heavy 
Intellij - not 
Front - End 
        VS Code 
        Atom
Pycharm

====================================================================================================
.classpath 
.project
node_modules 

Note: When developers are creating files/writing code. There are additional files that will be added 
by using the IDEs. IDEs create these files and directories, but as a DevOps Engineer you can create 
them manually if needed. 

touch .classpath .project && mkdir node_modules 

These files shouldn't be tracked by git because they are not apart of the project. In this case use 
the ".gitignore" file. 

             IQ: What is .gitignore file used for? 
             Answer: This records files and dirs that shouldn't be tracked by git 
           
             IQ: If you don't want a file to be tracked by git what do you? 
             Answer: use .gitignore 
 
 .classpath 
.project
node_modules 

1. Create a file  .gitignore 
   touch .gitignore 
   
2. Move the 3 files into the .gitignore file 
   mv .classpath .gitignore 
   mv .project .gitignore 

3. git add .
4. git commit -m ".gitignore created"
5. git push ts master 
================================================================================================


IQ: Which AtLassian tools have you used in your project?:
=========================================================

BitBucket ---> scm      = GitHub 
Bamboo ---> CI/CD       = Jenkins 
Jira ----> Ticketing tool = 
Confluence ---> Documentation 



Git Branching
=============
IQ: How many branches are you supporting? 

Answer: 
  Branches are used to create lines of development. A branch is a line development. 
  
  We maintain a minimum of 3 branches: 
         development branch 
         staging branch 
         master branch 
  Environments:
        development branch = deploying to Dev ENV 
        testing branch = deploys to Testing ENV 
        testing branch = deploys to UAT(QA, BA) ENV
        MASTER branch = code are deployed to PROD 
        
        
 Command Legend: 
 git branch = list all the branches [lines of development]
 git branch branchName = create a new branch 
 git checkout branchName = switches branches 
 
 git branch 
 git branch branchName
 git checkout branchName 
 git commit -a -m ts "comment"
 git checkout branchName 
 git diff branchName
 git merge branchName m "reviewed and approved"
 git diff branchName (nothing should show anything)
 
 CONFLCT are resloved manually when gitting error. The error stems from not   merging changes immediately approving the "diff".
 Note: Not best practice, merge all changes before switching branches. 
    
 
        
        

              





 
 


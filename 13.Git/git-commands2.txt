IQ: What is the difference between Git & Github?
Answer: 
Git is an open source DVS which records changes made to files (codes) laying emphasis on speed, data integrity in a distributed non-linear workflows. 

GitHub is a hosted repo (UI) for git or an open source SCM tools

Git 
====
Git tracks changes in files/codes/scripts 
Git keep the records of old and new using a commitID (command "git show")

Basic Git Commands 
==================
git init = used to initalize empty git repo (directory) in /home/USER/repoName/.git/

git status = used to track file locations

git add = moves files from the working area to the staging area 

git commit - m =  moves files to the local repository from Staging Area (good commit message for tracking changes/author)

git show = prints what changes that happened in a particular commit (any commitID)

git remote -v = lists your aliases 

git push = moves changes in code to Remote-Repo in SCM [GitHub/GitLab, ETC]

git pull = it brings changes in the code to the Working Area 

git log = list all commits 

git show = shows changes that occured in a commit

git branch = a git branch is a line of development 

git fetch = it brings changes in the code to the LocalRepo 

git diff = reviews the difference between what is in the remoteRepo and localRepo Master branch. Allows you to review what files/changes a developer has made 

git clone = it brings the entire code to the Working Area (user access the code for the first time)

git branch = a git branch is a line of development 

Â git branch -d branchName = delete branch 
 
 git cherry-pick = used to merge specific commit in a branch 
 
 git merge = used to review and merge changes to one branch to another branch. combines however many commits into one merge. 
            git merge 
                sc1-->sc2-->sc3-->sc4 = mc1 
 
 git rebase = used to review and merge changes to one branch to another branch. Will separate each version/commit/changes by each               commit 
               git rebase 
                 sc1-->sc2-->sc3-->sc4 = mc1 
                 = mc1-->mc2-->mc3-->mc4
 
 
 git origin = allows you to push all the changes to all the branches 
              origin = is the defualt aliasName created by git 
              
              git push origin --all 
              git push aliasName --all 
              git push aliasName master 
              git push aliasName stabe 
              git push aliasName development 
              
git branch bug_fix_aaignee_jiraTicket# = removing bugs in the code landmark_145 = removing bugs in the code **created from the master branch**

git branch feature_aaignee_jiraTicket# = branch for adding new features **created from the master branch**

git tag:created only from the master branch . Tags are created for releases after a production cycle. When we use a tag we create a production release. 

difference b/w tags and brnaches 
=====Tags                              =====Branches 
immutable (can't modify)               mutable
unmodifiable                           modifiable 
After PROD                             development-WIP
Master Recommended                     any branch 

git tag twitter-v1.0.2
1 --> higher version 
0 --> lower version 
2 --> patch 

git head = is a pointer that points to the current branch and latest commit 

          Development: writing codes/software (this is how developers commit and change code)
          ===================================================================================
               working-area  -->   staging-area  --> localRepo  -->   remoteRepo [gitHub]
               untracked files     git add           git commit       git push        
               red                 green 
               
               git fetch                             <-----------------------------------   
               git merge 
               git pull  <--------------------------------------------------------------------
                      

Prequisite, update author Identity (must be known):
==================================================
git config --global user.email "hr@landmarktech.com"
git config --global user.name "Your Name"
git config --global --list = to confirm the configs have been done 

Commands to commit code versions to SCM in gitHub: 
==================================================
git add .      /  git add *      
git log 
git commit -m "first commit"
git show (to get the commit ID)
git remote -v   
git remote add aliasName repoURL
git push aliasName branchName 
git pull aliasName branchName 
git fetch aliasName branchName 
git diff aliasName/branchName
git merge aliasName/branchName
git cherry-pick commitID
git rebase
git branch bug_fix_landmark 

git push origin --all 
              git push aliasName --all 
              git push aliasName master 
              git push aliasName stabe 
              git push aliasName development 
              
git tag tagName 
git push aliasName tag tagName 


================================================================================================================================
IDEs - Integrated Development Environments (developers use this to develop code)

Eclipse - open source Java Based IDE 
MyEclipse - not 
NetBeans OS Heavy 
Intellij - not 
Front - End 
        VS Code 
        Atom 
        Pycharm

When developers are creating files/writing code. There are additional files that will be added by using the IDEs. IDEs create these files and directories, but as a DevOps Engineer you can create them manually if needed. These files shouldn't be tracked by git because they are not apart of the project. In this case use 
the ".gitignore" file. 

 .classpath 
.project
node_modules 

1. vim .gitignore 
2. touch .classpath .project && mkdir node_modules
3. mv .classpath  .gitignore
4. mv .project .gitignore
5. git add .
6. git commit -m ".gitignore created"
7. git push ts master


IQ: Which AtLassian tools have you used in your project?:

BitBucket ---> scm      = GitHub 
Bamboo ---> CI/CD       = Jenkins 
Jira ----> Ticketing tool = 
Confluence ---> Documentation
==============================================================================================================================

==============================================================================================================================
Git Branching = Branches are used to create lines of development. A branch is a line development. 

IQ: How many branches are you supporting? 
Answer:  
  We maintain a minimum of 3 branches: 
         development branch 
         staging branch 
         master branch 
  Environments:
        development branch = deploying to Dev ENV 
        testing branch = deploys to Testing ENV 
        testing branch = deploys to UAT(QA, BA) ENV
         master branch = code are deployed to PROD        
        
 Command Legend: 
 git branch = list all the branches [lines of development]
 git branch branchName = create a new branch 
 git checkout branchName = switches branches 
 
 git branch 
 git branch branchName
 git checkout branchName 
 git commit -a -m ts "comment"
 git checkout branchName 
 git diff branchName
 git merge branchName "reviewed and approved"
 git branch -d branchName 
 git cherry-pick
 git rebase 
 
 CONFLCT are resloved manually when gitting error. The error stems from not       
 merging changes immediately approving the "diff".

 Note: Not best practice, merge all changes before switching branches. 
 Steps to resolve conflict:
 1. vi fileName (effected file to resolve by removing the changes reflected)
 2. git commit -a -m "conflict is resolved"
 ===============================================================================================================================

SCM: 
gitHub
gitLab 
bitbucket 
codeCommit 


 IQ: 
 Explain your branching strategy in LandmarkTechnology??
 Explain your branching strategy in Dominion systems??
 
 Answer: 
 Branching is very important in Git, we use branching to create lines of development. Having a good branching strategy is important when it comes to software delivery, development, and quality. 
 
In landmark we maintain a minimum of 3 branches -- staging, development, master. We makesure code from the development branch is deployed to the Dev Environment; code from the Stage Branch is deployed to the STAGE/uat/test/QA Environment; Master Branch code is deployed to the PRODUCTION Environment (delivered to customers).

If we notice bugs in the code we create a bug fix branch is created from the master. Once the bug is removed we have to create a pull request for other members of the team to review. If everything is correct it will be merged in the master branch. 
 
Similarly if the client wants us to add a new feature, we create the feature branch. The feature is created from the master branch and before it's merged there is a pull request. 
